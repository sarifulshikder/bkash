import Head from "next/head";
import Nav from "@/components/Nav";
import PaymentForm from "@/components/PaymentForm";
import axios from "axios";
import { useState } from "react";
import ErrorAlert from "@/components/ErrorAlert";
import SuccessAlert from "@/components/SuccessAlert";
import { FiCopy } from "react-icons/fi";
import dynamic from "next/dynamic";
import { CopyToClipboard } from "react-copy-to-clipboard";
import { Toaster, toast } from "react-hot-toast";
import DemoAccount from "@/components/DemoAccount";
import { useRouter } from "next/router";
import StatusAlert from "@/components/StatusAlert";
import Footer from "@/components/Footer";

const DynamicReactJson = dynamic(import("react-json-view"), { ssr: false });

export default function Home() {
  const router = useRouter();
  const [loading, setLoading] = useState<boolean>(false);
  const [username, setUsername] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [app_key, setAppKey] = useState<string>("");
  const [app_kscret_key, setAppSecretKey] = useState<string>("");
  const [createPaymentRes, setCreatePaymentRes] = useState<object>({});
  const [executePaymentRes, setExecutePaymentRes] = useState<object>({});

  const [paymentId, setShowPaymentID] = useState<string | null>(null);
  const [paymentIdInput, setShowPaymentIDInput] = useState<string>("");

  const [error, setError] = useState<string | null>(null);
  const [executionError, setExecutionError] = useState<string | null>(null);

  const { status } = router.query;

  const handleSubmitCreate = (e: React.SyntheticEvent): void => {
    setLoading(true);
    e.preventDefault();
    axios
      .post("/api/create-payment", {
        username,
        password,
        app_key,
        app_kscret_key,
      })
      .then((res) => {
        setLoading(false);
        if (res.data.data?.statusCode === "0000") {
          if (window !== undefined) {
            window.open(res.data.data?.bkashURL, "_ blank");
          }
          setCreatePaymentRes(res.data.data);
          setShowPaymentID(res.data?.data?.paymentID);
        }
      })
      .catch((err) => {
        setLoading(false);
        setError(err?.response?.data?.error);
      });
  };

  const handleExecutePayment = (e: React.SyntheticEvent): void => {
    setLoading(true);
    e.preventDefault();

    axios
      .post("/api/execute-payment", {
        username,
        password,
        app_key,
        app_kscret_key,
        paymentId,
      })
      .then((res) => setExecutePaymentRes(res.data.data))
      .catch((err) => setExecutionError(err?.response?.data?.error))
      .finally(() => setLoading(false));
  };

  return (
    <>
      <Head>
        <title>Bkash Payment Validation</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav />
      <StatusAlert status={status} />
      <div className="mx-auto mb-16 container overflow-hidden">
        <Toaster position="top-left" reverseOrder={false} />
        <h2 className="my-2 text-center font-semibold">
          Step 1 : Create Payment
        </h2>
        <PaymentForm
          username={username}
          password={password}
          app_key={app_key}
          app_kscret_key={app_kscret_key}
          setUsername={setUsername}
          setPassword={setPassword}
          setAppKey={setAppKey}
          setAppSecretKey={setAppSecretKey}
          handleSubmitCreate={handleSubmitCreate}
          loading={loading}
        />
        {paymentId !== null ? (
          <div>
            <DemoAccount />

            <div className="relative">
              <DynamicReactJson
                theme={"monokai"}
                enableClipboard={false}
                collapsed={false}
                src={createPaymentRes}
                displayDataTypes={false}
                name={false}
                displayObjectSize={false}
                style={{ padding: 15, marginBottom: 15, borderRadius: 5 }}
              />
              <CopyToClipboard
                text={JSON.stringify(createPaymentRes)}
                onCopy={() => toast.success("Copied Successfully")}
              >
                <FiCopy
                  size={28}
                  className="absolute cursor-pointer top-3 right-3 text-white"
                />
              </CopyToClipboard>
            </div>
          </div>
        ) : null}

        {error && <ErrorAlert title={error} />}
        {paymentId ? (
          <SuccessAlert
            paymentIdInput={paymentIdInput}
            setShowPaymentIDInput={setShowPaymentIDInput}
            paymentId={paymentId}
            handleExecutePayment={handleExecutePayment}
            loading={loading}
          />
        ) : null}
        {Object.keys(executePaymentRes).length !== 0 ? (
          <div className="relative">
            <DynamicReactJson
              theme={"monokai"}
              enableClipboard={false}
              collapsed={false}
              src={executePaymentRes}
              displayDataTypes={false}
              name={false}
              displayObjectSize={false}
              style={{
                padding: 15,
                marginBottom: 15,
                marginTop: 15,
                borderRadius: 5,
              }}
            />
            <CopyToClipboard
              text={JSON.stringify(executePaymentRes)}
              onCopy={() => toast.success("Copied Successfully")}
            >
              <FiCopy
                size={28}
                className="absolute cursor-pointer top-3 right-3 text-white"
              />
            </CopyToClipboard>
            {executionError && <ErrorAlert title={executionError} />}
          </div>
        ) : null}
      </div>
      <Footer />
    </>
  );
}
